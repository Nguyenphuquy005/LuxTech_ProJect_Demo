{"ast":null,"code":"import ValidationError from '../ValidationError';\nimport { once } from './async';\nexport default function runTests(options, cb) {\n  var endEarly = options.endEarly,\n      tests = options.tests,\n      args = options.args,\n      value = options.value,\n      errors = options.errors,\n      sort = options.sort,\n      path = options.path;\n  var callback = once(cb);\n  var count = tests.length;\n  if (!count) return callback(null, value);\n  var nestedErrors = [];\n  errors = errors ? errors : [];\n\n  for (var i = 0; i < tests.length; i++) {\n    var test = tests[i];\n    test(args, function finishTestRun(err) {\n      if (err) {\n        // always return early for non validation errors\n        if (!ValidationError.isError(err)) {\n          return callback(err);\n        }\n\n        if (endEarly) {\n          err.value = value;\n          return callback(err);\n        }\n\n        nestedErrors.push(err);\n      }\n\n      if (--count <= 0) {\n        if (nestedErrors.length) {\n          if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name\n\n          if (errors.length) nestedErrors.push.apply(nestedErrors, errors);\n          errors = nestedErrors;\n        }\n\n        if (errors.length) {\n          callback(new ValidationError(errors, value, path));\n          return;\n        }\n\n        callback(null, value);\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}