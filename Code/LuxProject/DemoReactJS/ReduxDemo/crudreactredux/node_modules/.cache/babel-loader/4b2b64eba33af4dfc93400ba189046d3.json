{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    addTodo(state, action) {\n      const {\n        id,\n        text\n      } = action.payload;\n      state.push({\n        id,\n        text,\n        completed: false\n      });\n    },\n\n    toggleTodo(state, action) {\n      const todo = state.find(todo => todo.id === action.payload);\n\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    }\n\n  }\n});\nexport const {\n  addTodo,\n  toggleTodo\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"sources":["D:/Luxtech/Code/LuxProject/DemoReactJS/ReduxDemo/crudreactredux/src/Redux/employeeRedux/EmployeeReduxKit.js"],"names":["createSlice","todosSlice","name","initialState","reducers","addTodo","state","action","id","text","payload","push","completed","toggleTodo","todo","find","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,UAAU,GAAGD,WAAW,CAAC;AAC3BE,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE,EAFa;AAG3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnB,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAeF,MAAM,CAACG,OAA5B;AACAJ,MAAAA,KAAK,CAACK,IAAN,CAAW;AAAEH,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYG,QAAAA,SAAS,EAAE;AAAvB,OAAX;AACH,KAJK;;AAKNC,IAAAA,UAAU,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAMO,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYD,MAAM,CAACG,OAAtC,CAAb;;AACA,UAAII,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAACF,SAAL,GAAiB,CAACE,IAAI,CAACF,SAAvB;AACH;AACJ;;AAVK;AAHiB,CAAD,CAA9B;AAiBA,OAAO,MAAM;AAAEP,EAAAA,OAAF;AAAWQ,EAAAA;AAAX,IAA0BZ,UAAU,CAACe,OAA3C;AAEP,eAAef,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState: [],\r\n    reducers: {\r\n        addTodo(state, action) {\r\n            const { id, text } = action.payload\r\n            state.push({ id, text, completed: false })\r\n        },\r\n        toggleTodo(state, action) {\r\n            const todo = state.find(todo => todo.id === action.payload)\r\n            if (todo) {\r\n                todo.completed = !todo.completed\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { addTodo, toggleTodo } = todosSlice.actions\r\n\r\nexport default todosSlice.reducer"]},"metadata":{},"sourceType":"module"}